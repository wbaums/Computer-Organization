1. Explain why the instructions in the trace did not produce the correct mathematical result. Which
instructions caused the problem, exactly?
   1250284240 * -1844255039 != 2305843008625102544
   The answer produced is obviously incorrect. There is one positive and one negative operand, but the
   result is positive. The issue arises with the following instruction:
   54dcfc  48 8d 04 ad 02 00 00 00 lea 0x2(,%rbp,4),%rax   rax=7fffffff73ab3b42
   This causes an incorrect mathematical result because of the way that emacs keeps data. In emacs all data types
   are stored as an elisp object. an elisp object is 64 bits long, with 62 containing data and 2 containing a special
   tag. Therefore most significant 2 bits are not usable. When a program shifts left and right data will be lost.
   When the lea instruction is called, the value is shifted and then stored into rax, but information is lost in
   the shift and the return value is incorrect as a result. 

2. Explain why the shell command emacs -Q -batch -eval '(print most-negative-fixnum)' outputs
-2305843009213693952. Where did the number come from? Explain in terms of the Emacs source code.
   I navigate to the source code of most-negative-fixnum within data.c to see what the source code says.
   There is a comment that says: "The smallest value that is representable in a Lisp integer." Lisp
   integers have no limit imposed on them in terms of size, but there is a point at which numbers are
   no longer stored efficiently. Numbers that are represented efficiently are called fuxnum while
   numbers not stored efficiently are called bignum. The numbers that are fixnum vs bignum are
   dependent on the implementation. most-negative-fixnum, which is defined as (2^63 - 1) >> 2=  -2305843009213693952
   because it is the smallest number that can be efficiently represented in Lisp integers on the X 86-64. 

3. Explain why the shell command emacs -Q -batch -eval
'(print (* most-positive-fixnum most-positive-fixnum most-positive-fixnum most-positive-fixnum))'
outputs only 1.
	Within the file lisp.h I search for most-positive-fixnum. Most-positive-fixnum = 0x1FFFFFFF
	and most-negative fixnum is defined in terms of most-posititive-fixnum:
	#define MOST_POSITIVE_FIXNUM (EMACS_INT_MAX >> INTTYPEBITS)
	#define MOST_NEGATIVE_FIXNUM (-1 - MOST_POSITIVE_FIXNUM)
	When we multiply we will get an answer of the form: 11000...001. This number will be so large
	that it will overflow, and when it overflows and is converted into 64 bits the final value
	will be 0x00...01 which is 1. The command above multiplying most-positive-fixnum and
	most-negative-fixnum will always print out 1. 
	

4. The Emacs executable was compiled with GCC's -O2 option. Suppose it had also been compiled with
-fwrapv. Explain any problems Emacs would run into, or if there would not be a problem explain why not.
	 If the program was compiled with -fwrapv in addition to -O2, this would cause overflow
	 withing the program to be handled by wrapping around. This would not cause the executable
	 to be any more accurate because overflowed values would wrap around and still return bad
	 values. There would be no errors reported by overflow and the program will complete
	 sucessfully. 
